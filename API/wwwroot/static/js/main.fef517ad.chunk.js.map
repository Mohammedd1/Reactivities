{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/profileStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextInput.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activities","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setloadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","format","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","setDisplayName","name","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","loadFollowings","loadUserActivities","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","MenuItem","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","LoadingComponent","Dimmer","MyTextInput","props","useField","field","meta","Form","Field","touched","label","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","placeholder","categoryOptions","MyDatePicker","selected","useHistory","useParams","validationSchema","Yup","required","nullable","enableReinitialize","initialValues","onSubmit","uuid","handleFormSubmit","handleSubmit","isValid","isSubmitting","dirty","className","autoComplete","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","type","email","password","setErrors","render","ValidationErrors","Message","err","i","isLoggedIn","border","relaxed","divided","ribbon","verticalAlign","Extra","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Statistic","Divider","setEditMode","isCurrentUser","Tab","Pane","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.fef517ad.chunk.js","sourcesContent":["//240\r\nexport interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\n//241\r\n//modified 242\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber=1,pageSize=2){\r\n        this.pageNumber=pageNumber;\r\n        this.pageSize=pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\n// import { request } from 'http';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { store } from '../stores/store';\nimport { User, UserFormValues } from '../models/user';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { PaginatedResult } from '../models/pagination';\n\n\n\n//Method to add some sleep to show loading\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\n//modified 254 - after creating .env files\n//axios.defaults.baseURL = 'http://localhost:5000/api';\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n//Sending up the token with request\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n//axios feature, every time we recieve a response come from our api we can do something with the response.\naxios.interceptors.response.use(async response => {\n    // try {\n    //     await sleep(1000);\n    //     return response;\n    // }\n    // catch (error) {\n    //     console.log(error);\n    //     return await Promise.reject(error);\n    // }\n\n    //254\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n\n    //240\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>;\n    }\n\n    return response;\n}, (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n\n    switch (status) {\n        case 400:\n            //showing toastify notes label\n            //toast.error('bad request');\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n\n                history.push('/not-found');\n            }\n\n            if (data.errors) {\n                //variable to store the different errors\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key]);\n                    }\n                }\n                //flat:to flatten the array\n                throw modalStateErrors.flat();\n            }\n            // else{\n            //     toast.error(data);\n            // }\n            break;\n        case 401:\n            toast.error('unauthorzied');\n            break;\n        case 404:\n            //toast.error('not found');\n            //make sure you bring the history from  index.tsx\n            history.push('/not-found');\n            break;\n        case 500:\n            // toast.error('server error');\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n// const responseBody = (response: AxiosResponse)=> response.data;\n//make response a generic type\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\n//object to store a common requests we gonna to make against axios\nconst requests = {\n    //body:{} --> body with type object\n    // get: (url: string) => axios.get(url).then(responseBody),\n    // post: (url: string, body: {}) => axios.post(url, body).then(responseBody),\n    // put: (url: string, body: {}) => axios.put(url, body).then(responseBody),\n    // del: (url: string) => axios.delete(url).then(responseBody),\n\n    //Generic type\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n\n}\n\n//object to store a requests of our activities\nconst Activities = {\n    // list: () => requests.get('/activities')\n    //specifying the type\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\n        .then(responseBody),//modified 240 //modified 241\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\n}\n\n//195\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    //203\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: { 'Content-type': 'multipart/form-data' }\n        })\n    },\n    //204\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),//207\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),//230\n    listFollowings: (username: string, predicate: string) =>\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),//232\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)//249\n\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles //195\n}\n\n//using this to access our activities request\nexport default agent;\n","\nimport { Profile } from \"./profile\";\n\nexport interface Activity {//no convenbtion to prefixing the interface name with I like we used to did in C#\n    id: string;\n    title: string;\n    date: Date | null;\n    //date: string;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n}\n\n//174\nexport class Activity implements Activity{\n    constructor(init?: ActivityFormValues){\n        Object.assign(this,init);\n    }\n}\n//class for activity form values(this will give us an opportunity to use a constructo to initialize certain values.)\nexport class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    //the constructor will take activity as a parameter, but it's going to be optional because we\n    //want to use this activity, form values for ever creating an activity or editing an existing activity.\n    constructor(activity?: ActivityFormValues) {\n        if(activity){\n            this.id=activity.id;\n            this.title=activity.title;\n            this.category=activity.category;\n            this.description=activity.description;\n            this.date=activity.date;\n            this.venue=activity.venue;\n            this.city=activity.city;\n\n        }\n\n    }\n}","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;//229\n    followingCount: number;//229\n    following: boolean;//229\n    photos?:Photo[];//195\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\n//195\nexport interface Photo{\n    id:string;\n    url:string;\n    isMain:boolean;    \n}\n\n//249\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n    }","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\n//import { v4 as uuid } from 'uuid';\n//import { runInNewContext } from \"vm\"; \n//import ActivityForm from \"../../features/activities/form/ActivityForm\";\nimport { format } from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\n\nexport default class ActivityStore {\n    //title = 'Hello from Mobx';\n    activities: Activity[] = [];\n    //javascript Map object\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;//prevent never end loading when click on create activity\n    pagination: Pagination | null = null;//240\n    pagingParams = new PagingParams();//241\n    predicate = new Map().set('all', true);//245\n\n    constructor() {\n        // makeObservable(this, {\n        //     title: observable,\n        //     //we need to bind this action to the property title\n        //     //way 1\n        //     //setTitle:action.bound\n        //     //way2\n        //     setTitle:action\n\n        // })\n\n        //we don't need to specifiy the properties inside makeObservable method \n        makeAutoObservable(this);\n        //245\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n\n    }\n\n    //241\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    //245\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    }\n    //241\n    //a way to send query string parameters instead of make it direct as '?pageNumber=&PageSize='\n    // in the URL 'requests.get<PaginatedResult<Activity[]>>('/activities')'\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        //245\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            }\n            else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    //computed functions\n    //sort activities by date\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\n            //Date.parse(a.date) - Date.parse(b.date));\n            a.date!.getTime() - b.date!.getTime());\n    }\n\n\n    //Group activities by date\n    get groupedActivities() {\n        //array of objects that has a key,value pairs\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                // const date = activity.date;\n                //const date = activity.date!.toISOString().split('T')[0];\n                const date = format(activity.date!, 'dd MMM yyyy');\n                //So what we're checking for here is to see if we have a match for this activity on this date.\n                //activities[date] = activities[date] if they match then [...activities[date], activity]\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n\n            }, {} as { [key: string]: Activity[] })//initial object to fix typing error,it tells us that each element implicitly has in any type\n            //because expression of type string cannot be used to index type activity.\n            //the key is the date and the value is an array of activity that are on  same date.\n        )\n    }\n\n    //Actions\n    //Action to update observer 'title'\n    //way 1\n    // setTitle(){\n    //     this.title=this.title+'!';\n    // }\n    //way 2\n    //automatically bind to property\n    //     setTitle=()=>{\n    //         this.title=this.title+'!';\n    //     }\n\n    //after refactoring the app using Mobx\n    loadActivities = async () => {\n        // this.setloadingInitial(true);\n        this.loadingInitial = true;\n        try {\n            //get activities from API\n            const result = await agent.Activities.list(this.axiosParams);//modified 240 //modified 241\n            //loop over these activities\n            //modified 240\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);//240\n            this.setloadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setloadingInitial(false);\n\n        }\n    }\n\n    //240\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        }\n        else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n\n                this.setloadingInitial(false);\n                return activity;\n            }\n            catch (error) {\n                console.log(error);\n                this.setloadingInitial(false);\n            }\n        }\n    }\n    //private helpwer methods\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n\n        //activity.date = activity.date.split('T')[0];//split at T and get the first peice\n        activity.date = new Date(activity.date!);\n        //this.activities.push(activity);//mutating our states\n        this.activityRegistry.set(activity.id, activity);\n    }\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n    setloadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    //we don't need the below methods\n    // selectActivity = (id: string) => {\n    //     //this.selectedActivity = this.activities.find(a => a.id === id);\n    //     this.selectedActivity = this.activityRegistry.get(id);\n\n    // }\n    // cancelSelectedActivity = () => {\n    //     this.selectedActivity = undefined;\n    // }\n    // openForm = (id?: string) => {\n    //     id ? this.selectActivity(id) : this.cancelSelectedActivity();\n    //     this.editMode = true;\n    // }\n    // closeForm = () => {\n    //     this.editMode = false;\n    // }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        // this.loading = true;\n        //after using history to redirect after the submit, we will move the uuid from below and set itin ActivityForm.tsx\n        //activity.id = uuid();\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);//174\n            newActivity.hostUsername = user!.username;//174\n            newActivity.attendees = [attendee];//174\n            this.setActivity(newActivity);//174\n            //update activity array inside our store\n            runInAction(() => {\n                //this.activities.push(activity);\n                //this.activityRegistry.set(activity.id, activity);\n                //this.selectedActivity = activity;\n                // this.editMode = false;\n                // this.loading = false;\n                this.selectedActivity = newActivity;//174\n            })\n        } catch (error) {\n            console.log(error);\n            // runInAction(() => {\n            //     this.loading = false;\n            // })\n        }\n    }\n    updateActivity = async (activity: ActivityFormValues) => {\n        // this.loading = true;\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                //this.activities = [...this.activities.filter(a => a.id !== activity.id), activity];\n                //this.activityRegistry.set(activity.id, activity);\n                //this.selectedActivity = activity;\n                // this.editMode = false;\n                // this.loading = false;\n\n                //174\n                if (activity.id) {\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n\n\n            })\n        }\n        catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n\n    }\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                //this.activities = [...this.activities.filter(a => a.id !== id)];\n                this.activityRegistry.delete(id);\n                //when click on view the activity will appear on the right hand,then if we click on delete\n                //it will delete it form the list but it will still appear on the right hand,below code will disappear it \n                // if (this.selectedActivity?.id == id) this.cancelSelectedActivity();\n                this.loading = false;\n            })\n        }\n        catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n\n    }\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees =\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                }\n                else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n\n                }\n\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error);\n        }\n        finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    //175\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n\n    }\n    //219\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    //230\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}\n","import { makeAutoObservable, runInAction } from 'mobx';\nimport { User, UserFormValues } from '../models/user';\nimport agent from '../api/agent';\nimport { store } from './store';\nimport { history } from '../..';\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n    get isLoggedIn() {\n        return !!this.user //cast the user object into boolean\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            //set the token\n            store.commonStore.setToken(user.token);\n            // if we want to modify unobservable, then it has to be inside an action.\n            runInAction(() => this.user = user);\n            //push the user into a new location after successfully logged in \n            history.push('/activities');\n            //close login modal\n            store.modalStore.closeModal();\n        }\n        catch (error) {\n            throw error;\n        }\n\n    }\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n    //Persisting token\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            //set the token\n            store.commonStore.setToken(user.token);\n            // if we want to modify unobservable, then it has to be inside an action.\n            runInAction(() => this.user = user);\n            //push the user into a new location after successfully logged in \n            history.push('/activities');\n            //close login modal\n            store.modalStore.closeModal();\n        }\n        catch (error) {\n            throw error;\n        }\n\n    }\n    //203\n    setImage=(image:string)=>{\n        if(this.user) this.user.image=image;\n    }\n    //207\n    setDisplayName = (name: string) => {\n        if (this.user) this.user.displayName = name;\n        }\n}","//195\nimport { makeAutoObservable, reaction, runInAction } from 'mobx';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport agent from '../api/agent';\nimport { store } from './store';\n\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;//203\n    loading = false;//204\n    followings: Profile[] = [];//230\n    loadingFollowings = false;//232 - if we initialize the variable we don't need to specifiy the type\n    activeTab = 0;//233\n    userActivities: UserActivity[] = [];//249\n    loadingActivities = false;//249\n\n    constructor() {\n        makeAutoObservable(this);\n\n        //233\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                }\n                else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n    //233\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    //198\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false)\n        }\n\n    }\n\n    //203\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n\n        }\n        catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n    //204\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;//make the current main photo as not main\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;//make the new photo as main photo\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n\n        }\n        catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n\n        }\n\n    }\n    //205\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n\n        }\n        catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n    //207\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateProfile(profile);\n            runInAction(() => {\n                if (profile.displayName && profile.displayName !==\n                    store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.profile = { ...this.profile, ...profile as Profile };\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    //230\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username/*modified 233*/) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n\n                //233\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n\n        }\n        catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n    //232\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        }\n        catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n    //249\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username,\n                predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loadingActivities = false;\n            })\n        }\n    }\n}","\nimport { createContext, useContext } from 'react';\nimport ActivityStore from './activityStore';\nimport CommonStore from './commonStore';\nimport UserStore from './userStore';\nimport ModalStore from './modalStore';\nimport ProfileStore from './profileStore';\nimport CommentStore from './commentStore';\n\ninterface Store {\n    activityStore: ActivityStore//class can be use also as types\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore:ModalStore;\n    profileStore: ProfileStore;//195\n    commentStore:CommentStore;//215\n\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore:new ModalStore(),\n    profileStore: new ProfileStore(),//195\n    commentStore:new CommentStore()//215\n}\n\n//react context for the above,we use it in index.tsx file\nexport const StoreContext = createContext(store);\n\n//create simple react hook that allow us just to use our store inside our components.\n//we use it in App.tsx\nexport function useStore() {\n    return useContext(StoreContext);\n\n}","import { ServerError } from \"../models/serverError\";\nimport { makeAutoObservable, reaction } from 'mobx';\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    //store token upon login\n    // token: string | null = null;\n    //Persisting token\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        //Persisting token\n        //reaction will only runs when this.token changed\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                }\n                else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n\n        )\n    }\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n    setToken = (token: string | null) => {\n        // if (token) window.localStorage.setItem('jwt', token);\n        // this.token = token;\n        //Persisting token\n        //we don't need to if(token) .. here because reaction() will handle this\n        this.token = token;\n    }\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}\n\n","import { makeAutoObservable } from \"mobx\";\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n    \n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","//215\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { makeAutoObservable, runInAction } from 'mobx';\nimport { ChatComment } from '../models/comment';\nimport { store } from './store';\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                // .withUrl('http://localhost:5000/chat?activityId=' + activityId, { - modfied 254\n                .withUrl(process.env.REACT_aPP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            //LoadComments should be the same name we put in ChatHub.cs file\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    //219\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n            //ReceiveComment should be the same name we put in ChatHub.cs file\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    //219\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment);//modified 219\n                });\n            })\n        }\n    }\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n    //217\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            //SendComment same method name in ChatHub.cs file\n            await this.hubConnection?.invoke('SendComment', values);\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n\n}","//import React from 'react';//all react compnents imported from react,react components are react function that returns jsx\nimport { observer } from 'mobx-react-lite';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, MenuItem, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n//import { useStore } from '../stores/store';\n\n//We would need to make this an observer as well, because we need to know if the user object has been\n//updated in our store.\nexport default observer(function NavBar() {\n    //const{activityStore}=useStore();\n    const { userStore: { user, logout } } = useStore();\n    // return in the below will return a jsx \n    return (\n        <Menu inverted fixed='top'>\n            {/* Container will adding some padding inside the nav bar */}\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\n                <Menu.Item>\n                    {/* <Button onClick={()=>activityStore.openForm()} positive content='Create Activity'/>//positive=green button */}\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <MenuItem position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`}\n                             text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </MenuItem>\n            </Container>\n        </Menu>\n    )\n})","//231\nimport React, { SyntheticEvent } from 'react';\nimport { Profile } from '../../app/models/profile';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Reveal } from 'semantic-ui-react';\nimport { useStore } from \"../../app/stores/store\";\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const { profileStore, userStore } = useStore();\n    const { updateFollowing, loading } = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        //username which we want to follow or unfollow\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    color='teal'\n                    content={profile.following ? 'Following' : 'Not Following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile.following  ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e,profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","//176\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileCard({ profile }: Props) {\n\n    //207\n    //truncate function to restrict the amount of text displayed in\n    //the attendee profile cards\n    function truncate(str: string | undefined) {\n        if (str) {\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\n        }\n    }\n\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{truncate(profile.bio)/*207*/}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount /*229*/} followers\n            </Card.Content>\n            <FollowButton profile={profile} />{/*231*/}\n        </Card>\n    )\n\n})\n\n\n\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n    //229\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n    return (\n\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    //176\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image\n                                size='mini'\n                                circular\n                                src={attendee.image || '/assets/user.png'}\n                                bordered\n                                style={attendee.following ? styles : null}\n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n\n\n            ))}\n        </List>\n    )\n})","import { Button, Icon, Item, Label, Segment } from 'semantic-ui-react'\nimport { Activity } from '../../../app/models/activity';\nimport { Link } from 'react-router-dom';\nimport { format } from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n\n    return (\n\n        //Styliing the list item\n        <Segment.Group>\n            <Segment>\n                {\n                    activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n\n                            )}\n                        </Item.Content>\n\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    {/* if the activity could be null so that why we add ! here and in evrywhere in the code*/}\n                    <Icon name='clock' />{format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' />{activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            {/* since we are using the floated in button,the button is on the edge to fix this we add clearning to the segment  */}\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View' />\n            </Segment>\n        </Segment.Group>\n    )\n}","//our Activity Dashboard is goning to be a react component,so we need to\nimport { observer } from 'mobx-react-lite';\nimport { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react'\n// import { Activity } from '../../../app/models/activity'\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from '../dashboard/ActivityListItem'\n//specify an interface for properties,this will be standard for any component we create.\n// interface Props {\n//     activities: Activity[];\n//     // selectActivity: (id: string) => void;\n//     //deleteActivity: (id: string) => void;\n//     submitting: boolean;\n// }\n\nexport default observer(function ActivityList() {\n    const { activityStore } = useStore();\n    //const {activitiesByDate}=activityStore;\n    const { groupedActivities } = activityStore;\n    //handle loading spinner on the click of specific delete button\n    // const [target, setTarget] = useState('');//will contains the button name\n    // function handleActivityDelete(e: SyntheticEvent<HTMLButtonElement>, id: string) {\n    //     setTarget(e.currentTarget.name);\n    //     deleteActivity(id);\n    // }\n\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {\n                        activities.map(activity => (\n                            <ActivityListItem key={activity.id} activity={activity} />\n                        ))}\n                </Fragment>\n            ))}\n        </>\n\n    )\n})","import React from 'react';\nimport { Header, Menu } from 'semantic-ui-react';\nimport Calendar from 'react-calendar';\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../../../app/stores/store';\n\n//modified 246\nexport default observer(function ActivityFilters() {\n\n    const { activityStore: { predicate, setPredicate } } = useStore();\n\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item\n                    content='All Activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar\n                onChange={(date:any) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","//247 -this code was copied from \\Resources\\Section1 - Introduction\\StudentAssets\\snippets -->ActivityListItemPlaceholder.txt\r\n//check also https://semantic-ui.com/elements/placeholder.html\r\nimport React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","//our Activity Dashboard is goning to be a react component,so we need to\nimport { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\n// import { Activity } from '../../../app/models/activity';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityList from '../dashboard/ActivityList';\n// import ActivityDetails from '../details/ActivityDetails';\n// import ActivityForm from '../form/ActivityForm';\nimport ActivityFilters from '../dashboard/ActivityFilters';\nimport { PagingParams } from '../../../app/models/pagination';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\n//specify an intyerface for properties,this will be standard for any component we create.\n// interface Props {\n//     activities: Activity[];\n//     //createOrEdit: (activity: Activity) => void;\n//     deleteActivity: (id: string) => void;\n//     submitting: boolean;\n// }\n//destructure the activities property itself\nexport default observer(function ActivityDashboard() {\n\n    //Mobx\n    const { activityStore } = useStore();\n    //destructure the properties that we need from activityStore\n    //const { selectedActivity, editMode } = activityStore;\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;//modified 242\n\n    //242\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    //242\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n\n        //activityStore.loadActivities();\n        if (activityRegistry.size === 0) loadActivities();//when initializing activityRegistery inside ActivityStore is gonna be zero\n\n    }, [activityRegistry.size, loadActivities])//pass in the activity store as a dependncy to use effect here as well\n\n    //if (activityStore.loadingInitial && !loadingNext) return <LoadingComponent content='Loading activities...' />//modified 242-247\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {/* </List> */\n                    //modified 243\n\n                    //modified 247\n                    activityStore.loadingInitial && !loadingNext ? (\n                        <>\n                            <ActivityListItemPlaceholder />\n                            <ActivityListItemPlaceholder />\n                        </>\n                    )\n                        : (\n                            <InfiniteScroll\n                                pageStart={0}\n                                loadMore={handleGetNext}\n                                hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                                initialLoad={false}\n                            >\n                                <ActivityList />\n                            </InfiniteScroll>\n                        )\n                }\n\n\n                {/* // activities={activities}\n                // deleteActivity={deleteActivity}\n                // submitting={submitting} */}\n\n            </Grid.Column>\n            <Grid.Column width='6'>\n                {/* View activity  */}\n                {/*we don't need to show the activity on the right hand*/}\n                {/* {selectedActivity && !editMode &&\n                    <ActivityDetails />\n                }\n                {\n                    editMode &&\n                    <ActivityForm />\n                    // createOrEdit={createOrEdit}\n                    // submitting={submitting} />\n                } */}\n\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n\n        </Grid>\n    )\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;//dark background or light background\n    content?: string;//give some loading text\n}\n\nexport default function LoadingComponent({ inverted = true, content = 'Loading...' }: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}\n\n","/* Creating reusable text input */\n\nimport { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?:string;\n    label?: string;//optional\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field}{...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","/* Creating reusable text area */\n\nimport { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows:number;\n    label?: string;//optional\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field}{...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","/* Creating reusable select input */\n\nimport { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;//optional\n}\n\nexport default function MySelectInput(props: Props) {\n    //helpers: allows us to manually set a value and manually set the touched status of our input component\n    const [field, meta, helpers] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions=[\n    {text:'Drinks',value:'drinks'},\n    {text:'Culture',value:'culture'},\n    {text:'Film',value:'film'},\n    {text:'Food',value:'food'},\n    {text:'Music',value:'music'},\n    {text:'Travel',value:'travel'},\n\n]","/* Creating reusable date picker */\n\nimport { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\n//Partial in Partial<ReactDatePickerProps>: make every property in ReactDatePickerProps optional\nexport default function MyDatePicker(props: Partial<ReactDatePickerProps>) {\n    const [field, meta,helpers] = useField(props.name!);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                // spread fiedls and props\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value=>helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useHistory, useParams, Link } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\n//import { Activity } from '../../../app/models/activity';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport {ActivityFormValues } from '../../../app/models/activity';\n\n//activity:selectedActivity --> reference  activity to selectedActivity name\nexport default observer(function ActivityForm() {\n    const history = useHistory();\n    const { activityStore } = useStore();\n    //const {selectedActivity,createActivity,updateActivity,loading}=activityStore;\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\n\n    //populate initialState and store it inside component state\n    //const [activity, setActivity] = useState(initialState);\n\n    //using routes\n    const { id } = useParams<{ id: string }>();\n    // const [activity, setActivity] = useState({\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    //yup validation schema\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),//using Yup default message\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),//using Yup default message\n        city: Yup.string().required()//using Yup default message\n    })\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity!)));\n        // '!' --> exclamation mark after variable name called  :Non-null assertion operator\n        // it means you're telling to TypeScript that you're certain that value is not null or undefined.\n    }, [id, loadActivity])\n    //if we forget to add our dependencies, then what's going to happen is that each time we set the activity\n    //that's going to make our component render and evryu time our component redners,then we call the use\n    // effect and then we go and sets of states and then we render our component and then we go and use\n    // our effect,But if we add dependencuies, then we only execute the code inside here if of these parameters have changed\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n\n        //redirectiona fter submisision\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            //then callback to send them to the location we want them to go,in this case will \n            //take us to the new activity \n            //`` --> ta\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        }\n        else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n    // //track input fields changes\n    // function handleChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n\n    //     const { name, value } = event.target;\n    //     setActivity({ ...activity, [name]: value });\n    // }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n\n    return (\n        // we used clearing below to clear previous floats(without it buttons will float out of the form)\n        <Segment clearing>\n            {/* \n            Formik need some required props, it needs at least initialValues and onSubmit\n            enableReinitialize:we use this to fill the forms fields with activity data when click on manage event(edit activity)\n            initialvalues:in this case is equal the activity that we're going to continue to get from our local state\n\n             */}\n            <Header content='Activity Details' sub color='teal' />\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize\n                initialValues={activity}\n                onSubmit={values => handleFormSubmit(values)}>\n                {/*below are the properties that we are intresetd in getting form formik\n                1-values\n                2- handlechange: is a function that we get from formic,which is goining to handle the input chnages.\n                3-handleSubmit: is also from formik\n                */}\n                {/*because we are using the Field and this automatically wires up to formik, we no longer need the\n                 values or the handle change being passed down to our form here just the handle submit for now.\n                 {({ values: activity, handleChange, handleSubmit }) => ( */}\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        {/* <FormField>\n                            <Field placeholder='Title' name='title' />\n                            <ErrorMessage name='title'\n                            render={error => <Label basic color='red' content={error}/>}/>\n                        </FormField>\n                        <Field placeholder='Description' name='description' />\n                        <Field placeholder='Category' name='category' />\n                        <Field type='date' placeholder='Date' name='date' />\n                        <Field placeholder='City' name='city' />\n                        <Field placeholder='Venue' name='venue' />\n\n                        {/*after using useField()*/}\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput\n                            placeholderText='Date'\n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button\n                        disabled={isSubmitting || !dirty ||!isValid}\n                            loading={isSubmitting}\n                            floated='right'\n                            positive\n                            type='submit'\n                            content='Submit' />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n\n            </Formik>\n\n        </Segment>\n    )\n})","import { ErrorMessage, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const { userStore } = useStore();\n\n    return (\n        <Formik\n            initialValues={{ email: '', password: '', error: null }}\n            // onSubmit={values => userStore.login(values)}\n            //Displaying errors in the form\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\n                setErrors({ error: 'Invalid email or password' }))}\n        //setErrors:is a function that allows us to set errors inside our form\n        >\n            {({ handleSubmit, isSubmitting, errors }) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error'\n                        render={() =>\n                            <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    // errors: string[] | null;\n    errors: any;\n}\n\nexport default function ValidationErrors({ errors }: Props) {\n    return (\n        <Message error>\n            {errors &&\n                <Message.List>\n                    {errors.map((err: any, i:any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>}\n        </Message>\n    )\n}","import { ErrorMessage, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Form, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const { userStore } = useStore();\n\n    return (\n        <Formik\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\n            //Displaying errors in the form\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\n                setErrors({ error }))}\n            //setErrors:is a function that allows us to set errors inside our form\n            validationSchema={Yup.object({\n                displayName:Yup.string().required(),\n                username:Yup.string().required(),\n                email:Yup.string().required().email(),\n                password:Yup.string().required(),\n            })}\n        >\n            {({ handleSubmit, isSubmitting, errors ,isValid,dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error'\n                        render={() =>\n                            // <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\n                            <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty ||isSubmitting}\n                     loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        // <Container style={{marginTop:'7em'}}>\n        //     <h1>Home page</h1>\n        //     <h3>Go to <Link to='/activities'>Activities</Link></h3>\n        // </Container>\n\n        //Styliing the Homepage\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to reactivities' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities\n                        </Button>\n                    </>\n                ) : (\n                    // <Button as={Link} to='/login' size='huge' inverted>\n                    //     Login!\n                    // </Button>\n                    //after adding modal\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Login!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register!\n                        </Button>\n                    </>\n                )}\n\n                {/* <Button as={Link} to='/activities' size='huge' inverted>\n                    Take me to the Activities\n                </Button> */}\n\n            </Container>\n\n        </Segment>\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length}{attendees.length === 1 ? 'Person' : 'People'} going\n\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {//229\n                                    attendee.following &&\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n\n                </List>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                {\n                    activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'white' }}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button\n                            color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activitiy'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link}\n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`}\n                            color='orange'  \n                            floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n\n                ) : activity.isGoing ? (\n                    <Button onClick={updateAttendance}>Cancel attendance</Button>\n\n                ) : (\n                <Button disabled={activity.isCancelled}\n                    loading={loading}\n                    onClick={updateAttendance}\n                    color='teal'>\n                    Join Activity\n                </Button>\n                )}\n\n            </Segment>\n        </Segment.Group>\n    )\n})","\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!,'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import { Formik, Form, Field, FieldProps } from 'formik';\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom';\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';//218\nimport { formatDistanceToNow } from 'date-fns';\n//216\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();//216\n\n    //216\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                { /*217 also modified 219*/}\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    //218\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            {/*218*/}\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    { //216\n                        commentStore.comments.map(comment => (\n                            <Comment key={comment.id}>\n                                <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                                <Comment.Content>\n                                    <Comment.Author as={Link} to={`/profile/${comment.username}`}>{comment.displayName}</Comment.Author>\n                                    <Comment.Metadata>\n                                        <div>{formatDistanceToNow(comment.createdAt)/*modified 219*/} ago</div>\n                                    </Comment.Metadata>\n                                    <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                                </Comment.Content>\n                            </Comment>\n                        ))\n                    }\n\n\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import React from 'react';\n// import { Activity } from '../../../app/models/activity';\nimport {Grid } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport {useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport ActivityDetailedSidebar from '../details/ActivityDetailedSidebar';\nimport ActivityDetailedHeader from '../details/ActivityDetailedHeader';\nimport ActivityDetailedInfo from '../details/ActivityDetailedInfo';\nimport ActivityDetailedChat from '../details/ActivityDetailedChat';\n// interface Props {\n//     activity: Activity;\n//     cancelSelectActivity:()=>void;\n//     openForm: (id: string) => void;\n// }\n\nexport default observer(function ActivityDetails() {\n    const { activityStore } = useStore();\n    const { selectedActivity: activity,loadActivity,loadingInitial,clearSelectedActivity } = activityStore;//modified 219\n\n    //using route parameters\n    const { id } = useParams<{ id: string }>();\n    // we want to side effect to occur when we load this particular component.\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();//219\n    },[id,loadActivity,clearSelectedActivity]);//id and loadActivity here are dependencies //modified 219\n\n\n    if (loadingInitial || !activity) return <LoadingComponent />;//we should return jsx element here,this will not return any thing,because we are\n    // not oding anything to load activity at this stage\n    return (\n        // <Card fluid>\n        //     {/* {``} -->allows us to directly add javascript property `-->press on ذ  */}\n        //     <Image src={`/assets/categoryImages/${activity.category}.jpg `} />\n        //     <Card.Content>\n        //         <Card.Header>{activity.title}</Card.Header>\n        //         <Card.Meta>\n        //             <span>{activity.date}</span>\n        //         </Card.Meta>\n        //         <Card.Description>\n        //             {activity.description}\n        //         </Card.Description>\n        //     </Card.Content>\n        //     <Card.Content extra>\n        //         <Button.Group widths='2'>\n        //             <Button as={Link} to={`/manage/${activity.id}`} basic color='blue' content='Edit' />\n        //             {/* below we don't need to use ()=> because we don't pass any parameter to the function */}\n        //             <Button as={Link} to='/activities' basic color='grey' content='Cancel' />\n        //         </Button.Group>\n        //     </Card.Content>\n        // </Card>\n\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                \n                <ActivityDetailedInfo activity={activity}/>\n                <ActivityDetailedChat activityId={activity.id} />{ /*modified 216*/}\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity}/>\n            </Grid.Column>\n        </Grid>\n\n    )\n})","import React from 'react';\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport axios from 'axios';\nimport { useState } from 'react';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL; //modified 254\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        // axios.post(baseUrl + 'activities', {}).catch(err => console.log(err.response));\n        // axios.post(baseUrl + 'activities', {}).catch(err => console.log(err));\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n\n            {//Displays the validation error\n                errors &&\n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}","import React from 'react';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activitiespage\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Container, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n\n    const { commonStore } = useStore();\n\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {\n                commonStore.error?.details &&\n                    <Segment>\n                        <Header as='h4' content='Stack trace' color='teal' />\n                        <code style={{ marginTop: '10px' }}>\n                            {commonStore.error.details}\n                        </code>\n                    </Segment>\n\n            }\n\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer(){\n    const {modalStore}=useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","//193\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\n//196\ninterface Props{\n    profile:Profile;\n}\n\nexport default observer(function ProfileHeader({profile}:Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount /*229*/} />\n                        <Statistic label='Following' value={profile.followingCount /*229*/} />\n                    </Statistic.Group>\n                    <Divider />{/*horizental line*/}\n                   <FollowButton profile={profile}/>{/*231*/}\n                </Grid.Column>\n\n            </Grid>\n        </Segment>\n    )\n})","//207\nimport { Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button } from \"semantic-ui-react\";\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\n\n\ninterface Props {\n    setEditMode: (editMode: boolean) => void;\n    }\n    export default observer(function ProfileEditForm({setEditMode}: Props) {\n    const {profileStore: {profile, updateProfile}} = useStore();\n    return (\n    <Formik\n    initialValues={{displayName: profile?.displayName, bio:\n    profile?.bio}}\n    onSubmit={values => {\n    updateProfile(values).then(() => {\n    setEditMode(false);\n    })\n    }}\n    validationSchema={Yup.object({\n    displayName: Yup.string().required()\n    })}\n    >\n    {({isSubmitting, isValid, dirty}) => (\n    <Form className='ui form'>\n    <MyTextInput placeholder='Display Name'\n    name='displayName' />\n    <MyTextArea rows={3} placeholder='Add your bio'\n    name='bio' />\n    <Button\n    positive\n    type='submit'\n    loading={isSubmitting}\n    content='Update profile'\n    floated='right'\n    disabled={!isValid || !dirty}\n    />\n    </Form>\n    )}\n    </Formik>\n    )\n    })","//207\nimport React, { useState } from 'react';\nimport { useStore } from \"../../app/stores/store\";\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\nimport ProfileEditForm from \"./ProfileEditForm\";\nimport { observer } from 'mobx-react-lite';\n\n\nexport default observer(function ProfileAbout() {\n    const { profileStore } = useStore();\n    const { isCurrentUser, profile } = profileStore;\n    const [editMode, setEditMode] = useState(false);\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","//200\n//below code is copied from https://github.com/react-dropzone/react-dropzone --> Usage\n//but we made our changes in the code\nimport React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\n//201\ninterface Props {\n    setFiles: (files: any) => void;\n\n}\n\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\n\n    //201\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n    //201\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        //201\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}\n","//202\nimport React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props{\n    imagePreview:string;\n    setCropper:(cropper:Cropper) => void;    \n}\nexport default function PhotoWidgetCropper({imagePreview,setCropper}:Props) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{ height: 200, width: '100%' }}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper=> setCropper(cropper)}\n\n        />\n\n    )\n}","\n//199\nimport React, { useEffect, useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetDropzone from '../imageUpload/PhotoWidgetDropzone';\nimport PhotoWidgetCropper from '../imageUpload/PhotoWidgetCropper';\n\n\n//203\ninterface Props{\n    loading:boolean;\n    uploadPhoto:(file:Blob) => void;\n}\nexport default function PhotoUploadWidget({loading,uploadPhoto}:Props) {\n    const [files, setFiles] = useState<any>([]);//201\n\n    const [cropper, setCropper] = useState<Cropper>();//202\n    //202\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));//modified on 203\n        }\n    }\n    //202\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {\n                    //201 \n                    files && files.length > 0 && (\n                        //202\n                        <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                    )\n                }\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {//202\n                files && files.length > 0 &&\n                    <>\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                        <Button.Group widths={2}>                            \n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>\n                }\n\n            </Grid.Column>\n        </Grid>\n    )\n}","//197\nimport React, { SyntheticEvent, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\n\n//197\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n    //198\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading,\n        loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    //204\n    const [target, setTarget] = useState('');\n    //203\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n    //204\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n    //205\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {\n                        isCurrentUser && (\n                            <Button floated='right' basic\n                                content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                                onClick={() => setAddPhotoMode(!addPhotoMode)} />\n                        )\n                    }\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n\n                        //<PhotoUploadWidget />\n                        //203\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n\n                        <Card.Group itemsPerRow={5}>\n                            {\n                                profile.photos?.map(photo => (\n                                    <Card key={photo.id}>\n                                        <Image src={photo.url} />\n                                        {//204\n                                            isCurrentUser && (\n                                                <Button.Group fluid width={2}>\n                                                    <Button\n                                                        basic\n                                                        color='green'\n                                                        content='Main'\n                                                        name={'main' + photo.id} //modified 205\n                                                        disabled={photo.isMain}\n                                                        loading={target === 'main' + photo.id && loading} //modified 205\n                                                        onClick={e => handleSetMainPhoto(photo, e)}\n                                                    />\n                                                    <Button\n                                                        //modified 205\n                                                        basic\n                                                        color='red'\n                                                        icon='trash'\n                                                        loading={target === photo.id && loading}\n                                                        onClick={e => handleDeletePhoto(photo, e)}\n                                                        disabled={photo.isMain}\n                                                        name={photo.id}\n                                                    />\n\n                                                </Button.Group>\n                                            )\n\n                                        }\n                                    </Card>\n                                ))}\n                        </Card.Group>\n                    )\n\n                    }\n                </Grid.Column>\n\n            </Grid>\n\n\n        </Tab.Pane>\n\n\n    )\n})","\n//232\nimport React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from \"../../app/stores/store\";\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const { profileStore } = useStore();\n    const { profile, followings, loadingFollowings ,activeTab} = profileStore;//modified 233\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header\n                        floated='left'\n                        icon='user'\n                        content={activeTab === 3 ? `People following ${profile?.displayName}`:`People ${profile?.displayName} is following`} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n\n            </Grid>\n        </Tab.Pane>\n    )\n})","//249\r\nimport React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","//194\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport ProfileAbout from './ProfileAbout';\nimport ProfilePhotos from './ProfilePhotos';\nimport ProfileFollowings from './ProfileFollowings';\nimport { useStore } from '../../app/stores/store';\nimport ProfileActivities from './ProfileActivities';\n//197\ninterface Props {\n    profile: Profile;\n}\n\n//modified 207\nexport default observer(function ProfileContent({ profile }: Props) {\n\n    const { profileStore } = useStore();//233\n\n    const panes = [\n        { menuItem: 'About', render: () => /*207*/<ProfileAbout /> },\n        { menuItem: 'Photos', render: () => /*197*/<ProfilePhotos profile={profile} /> },\n        { menuItem: 'Event', render: () => /*249*/<ProfileActivities /> },\n        { menuItem: 'Followers', render: () => /*232*/<ProfileFollowings /> },\n        { menuItem: 'Following', render: () => /*232*/<ProfileFollowings /> },\n    ];\n\n    return (\n        <Tab\n            menu={{ fluid: true, vertical: true }}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n\n        />\n    )\n})","//192\nimport React, { useEffect } from 'react';\nimport { Grid } from 'semantic-ui-react';\nimport ProfileHeader from '../profiles/ProfileHeader';\nimport ProfileContent from '../profiles/ProfileContent';\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../../app/stores/store';\nimport { useParams } from 'react-router';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\n\nexport default observer(function ProfilePage() {\n\n    const { username } = useParams<{ username: string }>();//196\n    const { profileStore } = useStore();//196\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;//196 //modified 233\n\n    useEffect(() => {\n        loadProfile(username);\n        //233\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username,setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>\n                }\n\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n//253\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n            />\r\n    )\r\n}","import { Container } from 'semantic-ui-react';\nimport NavBar from '../layout/NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\n// import LoginForm from '../../features/users/LoginForm';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  //loading sppineer is appearing on each compoents,we we will remove it form here and paste it inside activty dashboard 1,2 and 3\n  //using MobX store,hook in store.ts file\n  //1\n  //const { activityStore } = useStore();\n\n  //local states\n  //const [activities, setActivities] = useState([]);\n  //const [activities, setActivities] = useState<Activity[]>([]);//added after adding activity.ts interface\n  //View selected activity\n  // const [selectedActivity, setSelectedActivity] = useState<Activity | undefined>(undefined);//(undefined is the initial value)\n  // //edit mode\n  // const [editMode, setEditMode] = useState(false);//set initially to false\n  //state for Loading\n  //remove the loading from here\n  // const [loading, setLoading] = useState(true);//set initially to true\n  //state of submitting\n  //const [submitting, setSubmitting] = useState(false);//set initially to false\n\n  //2\n  // useEffect(() => {\n  //   //calling get activities API\n  //   //we changed axios.get('http://localhost:5000/api/activities'). to get type safety\n  //   //we comment the below when we start using axios section\n  //   // axios.get<Activity[]>('http://localhost:5000/api/activities').then(response => {\n  //   //   setActivities(response.data);\n  //   // })\n  //   // agent.Activities.list().then(response=>{\n  //   //   setActivities(response);\n  //   // });\n\n  //   //after adding input type=date to input field in form,it won't display the date that returns from activities becuase it is in different format \n  //   //so we need to reformat the date that returns from database\n  //   // agent.Activities.list().then(response => {\n  //   //   //create a new array of Activity \n  //   //   let activities: Activity[] = [];\n  //   //   response.forEach(activity => {\n  //   //     activity.date = activity.date.split('T')[0];//split at T and get the first peice\n  //   //     activities.push(activity);\n  //   //   })\n  //   //   setActivities(activities);\n  //   //   setLoading(false);//trun off loading indicator\n  //   // });\n\n  //   //after refacotring\n  //   activityStore.loadActivities();\n  // }, [activityStore])//pass in the activity store as a dependncy to use effect here as well\n\n  //remove the below after using Mobx\n  // function handleSelectActivity(id: string) {\n  //   setSelectedActivity(activities.find(x => x.id === id));\n  // }\n  // function handleCancelSelectedActivity() {\n  //   setSelectedActivity(undefined);\n  // }\n  // //edit mode \n  // //id? --> optional parameter\n  // function handleFormOpen(id?: string) {\n  //   id ? handleSelectActivity(id) : handleCancelSelectedActivity();\n  //   setEditMode(true);\n  // }\n  // function handleFormClose() {\n  //   setEditMode(false);\n  // }\n\n  //remove create or edit from here after using Mobx\n  // function handleCreateOreditActivity(activity: Activity) {\n  //   /*//check if we have activity id:yes means update, no means create\n  //   activity.id ?\n  //     //[...activities.filter(x => x.id !== activity.id), activity] removing the activity from the activities list and add \n  //     //the update activity\n  //     setActivities([...activities.filter(x => x.id !== activity.id), activity])\n  //     //{...activity,id:uuid()}} --> get all the property inside activity and the id of the new created activity set it with a new uuid\n  //     : setActivities([...activities, { ...activity, id: uuid() }]);\n  //   setEditMode(false);\n  //   //displaying the new activity\n  //   setSelectedActivity(activity);*/\n\n  //   //Section 6 - posting datat to the server\n  //   setSubmitting(true);\n  //   if (activity.id) {\n  //     agent.Activities.update(activity).then(() => {\n  //       setActivities([...activities.filter(x => x.id !== activity.id), activity])\n  //       setSelectedActivity(activity);\n  //       setEditMode(false);\n  //       setSubmitting(false);\n  //     })\n  //   }\n  //   else {\n  //     activity.id = uuid();\n  //     agent.Activities.create(activity).then(() => {\n  //       setActivities([...activities, activity]);\n  //       setSelectedActivity(activity);\n  //       setEditMode(false);\n  //       setSubmitting(false);\n  //     })\n  //   }\n  // }\n\n  //remove delete from here after using Mobx\n  // function handleDeleteActivity(id: string) {\n  //   //delete activity on the server\n  //   setSubmitting(true);\n  //   agent.Activities.delete(id).then(() => {\n  //     setActivities([...activities.filter(x => x.id !== id)]);\n  //     setSubmitting(false);\n  //   })\n  // }\n\n  //check if we are loading before returning the jsx in the below return.\n  //if (loading) return <LoadingComponent content='loading app' />\n\n  //3\n  //if (activityStore.loadingInitial) return <LoadingComponent content='loading app' />\n\n  const location = useLocation();\n  //Persisting token\n  const { commonStore, userStore } = useStore();\n  //use effect to do something when this component loads.\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    }\n    else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n  //Add loading flag\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      {/* //the below lines looks like html but they are not, they are jsx(JavaScript XML)\n    // <div className=\"App\">\n\n    //we will using fragment instead of a div to avoid rendering an empty div,and the reason we need somethign here\n    //div or fragment is that it is not allowed to return two different elemnts inside the react component,NavBar\n    //is an element and Container is an element, we can only add single element and have as many childs as we want \n    //inside it,we are not allowed to return two seperate elements at the same element so we need to add a div or fragment.\n    //also a shorthand for <fragment> is empty tag <> and </>\n    // <div> \n    // <Fragment> */}\n      {/*removeing the below header and replace it with */}\n      {/* <Header as='h2' icon='users' content='Reactivities'/> */}\n      {/* <NavBar openForm={handleFormOpen} /> */}\n\n      {/* <NavBar/> */}\n      {/* <Container style={{ marginTop: '7em' }}> */}\n      {/* </List> */}\n\n      {/*Remove the below two lines after Refactoring the app to use MobX*/}\n      {/* <h2>{activityStore.title}</h2>\n        <Button content='Add exclamation!' positive onClick={activityStore.setTitle}/> */}\n\n\n      {/*\n        Removing below after adding routers\n         <ActivityDashboard\n\n          //we sepecifiying activities property to pass activities list into ActivityDashboard\n          // activities={activityStore.activities}\n          // // createOrEdit={handleCreateOreditActivity}\n          // // deleteActivity={handleDeleteActivity}\n          // submitting={submitting}\n          /> \n        */}\n      {/*React Router will return any component that match the path,so '/' will return homepage component\n        '/' activities wil return homepage and activities components, so we need to add exact for homepage route\n        */}\n      {/* <Route exact path='/' component={HomePage}/> */}\n      {/* <Route exact path='/activities' component={ActivityDashboard}/> */}\n      {/* <Route path='/activities/:id' component={ActivityDetails}/> */}\n      {/* <Route path='/createActivity' component={ActivityForm}/> */}\n      {/* <Route key={location.key} path={['/createActivity','/manage/:id']} component={ActivityForm}/> */}\n      {/* </Container> */}\n      {/* </div> */}\n      {/* </Fragment> */}\n\n      {/*Adding react tostify component*/}\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer/>\n      {/* Moving hoem page outside the nav bar */}\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                {/*modified 253*/}\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                {/* <Route path='/createActivity' component={ActivityForm} /> */}\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <Route path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                {/* <Route path='/login' component={LoginForm} /> */}\n                <Route component={NotFound} />\n              </Switch>\n\n            </Container>\n          </>\n        )}\n      />\n    </>\n\n  );\n}\n\n//export default App;\n//to be able to observe our observable in App\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//252\r\n//this code copied from https://v5.reactrouter.com/web/guides/scroll-restoration\r\nimport { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import ReactDOM from 'react-dom'; //web version of the react\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    {/*put our app isnide the router*/}\n    {/* <BrowserRouter>\n      <App />\n    </BrowserRouter> */}\n    <Router history={history}>\n      {/*252*/}\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n\n  document.getElementById('root')//inside this div root will going our react application that is inside .<React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}